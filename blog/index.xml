<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Sébastien Putier - Blog</title>
    <link>https://sputier.github.io/blog/</link>
    <description>Recent content in Blog on Sébastien Putier - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Dec 2019 00:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://sputier.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design patterns - Builder</title>
      <link>https://sputier.github.io/blog/2019/12/12/design-pattern-builder/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0100</pubDate>
      
      <guid>https://sputier.github.io/blog/2019/12/12/design-pattern-builder/</guid>
      <description>The Builder design pattern is a simple yet powerful creational pattern. In this post, I will demonstrate how to use it to encapsulate the complexity needed to create an object.
Note   This post is part of the Design Patterns series. You will find links to the published posts here.  The problem Our application uses dynamic connection strings to access various databases. The following list shows some of the last connection strings generated by the app :</description>
    </item>
    
  </channel>
</rss>